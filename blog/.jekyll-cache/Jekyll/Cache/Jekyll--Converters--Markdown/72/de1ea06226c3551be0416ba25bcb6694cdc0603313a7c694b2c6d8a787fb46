I"£+<h3 id="entrando-y-saliendo-de-vim">Entrando y saliendo de VIM.</h3>
<p>vim nombre_del_archivo para abrir vim <br />
:w: guarda el archivo. <br />
:q  sale, :q! para forzar la salida.
:wq guarda y sale.<br />
:x sale y guarda, equivalente a wq.</p>

<p>Se puede salir usando tambi√©n Shift+zq (salir sin guardar :q) o Shift+zz (guardar y salir que es equivalente a :wq o :x)</p>

<p>Si abr√≠s vim sin el nombre del archivo. O sea s√≥lo escribiendo vim, cuando guard√°s vas
a tener que asignar el nombre del archivo haciendo :w &lt;nombre del archivo&gt;</p>
<h4 id="navegaci√≥n">Navegaci√≥n.</h4>
<p><img src="/blog/assets/img/vim_keys_hjkl.jpeg" /></p>
<blockquote>
  <p>La tecla h est√° a la izquierda y mueve a la izquierda. <br />
  La tecla l est√° a la derecha y mueve a la derecha. <br />
  La tecla j parece una flecha que apunta hacia abajo.</p>
</blockquote>

<p><span style="color:green;">No deber√≠as usar las flechas</span>, si us√°s las flechas no entendiste VIM al 100% todav√≠a.
Acostumbrarse a usar h, j, k, l fue una de las cosas que m√°s me costaron, por la
memoria muscular que ten√≠a de usar las flechas, ten√©s que practicarlos hasta que no tengas
que pensar cuando los est√°s usando.</p>

<p>escape: entr√°s a normal mode. Por defecto VIM abre en Normal Mode. En normal mode VIM va a interpretar como un comando cualquier tecla que presiones, por ejemplo apret√° Escape y despu√©s w, vas a moverte palabra por palabra en el archivo que ten√©s abierto.
Con i: entr√°s a insert mode (cuando est√°s en insert mode pod√©s empezar a escribir texto) por ejemplo si estando en Insert Mode apret√°s ahora w te lo va a tomar como una entrada de texto, no como un comando.</p>

<p>Siempre vas a estar variando entre estos dos, para moverte y editar el c√≥digo.</p>

<p>w: mueve hacia adelante por palabras desde el cursor hasta el final de la palabra, incluyendo el espacio.<br />
b: mueve hacia atr√°s desde el cursor hasta el comienzo de la palabra, incluyendo el espacio.<br />
y: copia. Todos los comandos de Vim se pueden usar con combos, pero esto es algo que lo veremos m√°s adelante, por eso ac√° se usa yy para copiar una l√≠nea solamente pero puede usar combos para copiar m√∫ltiples l√≠neas, como por ejemplo: yt. (copia desde donde est√° el cursor hasta que encuentra un .), o yj (copia dos lineas desde el cursor para abajo, habiamos visto que j ser√≠a para bajar), o yk (copia dos lineas para arriba). <br />
yy: copia una l√≠nea dentro de Vim, ojo no lo copia al clipboard.<br />
p: pega lo copiado con y.<br />
d: borra y lo copia. Pasa lo mismo que con y, se puede utilizar con combos, d por si s√≥lo no hace nada. Pero si lo combinas como por ejemplo: dd (borra una linea entera), dj (borra dos lineas hacia abajo), dk (borra dos l√≠neas hacia arriba), d$ (borra desde el cursor hasta el final de la linea), dw(borra una palabra hacia adelante), db(borra una palabra hacia atr√°s)<br />
v: selecci√≥n visual, se usa al igual que los otros combinandolos con otras instrucciones, como por ejemplo: vw, vb, v$, vk, vj. Una vez que est√°s en visual mode pod√©s seleccionar el texto hacia adelante presionando w infinitas veces, sal√≠s de este modo con Escape.<br />
V: selecci√≥n visual, pero a diferencia de v, selecciona la l√≠nea completa.<br />
:w: guarda el archivo.<br />
:q sale.</p>

<p>:wq guarda y sale.</p>

<p>:x sale y guarda, equivalente a wq.</p>

<p>Se puede salir de VIM usando tambi√©n Shift+zq (salir sin guardar :q) o Shift+zz (guardar y salir que es equivalente a :wq o :x)</p>

<p>o: agrega una nueva l√≠nea abajo, mueve el cursor abajo y te deja en insert mode, si est√°s situado en el comienzo de la definici√≥n de una funci√≥n de programaci√≥n te ubicar√° adentro de la misma en insert mode.<br />
shift+o: lo mismo pero hacia atr√°s.<br />
shift+p: lo mismo que p pero pega atr√°s del cursor.<br />
a: te deja en insert mode al igual que i, s√≥lo que en vez de insertar atr√°s del cursor lo hace adelante del cursor, muy √∫til cuando quer√©s insertar texto y al final de una l√≠nea.<br />
shift+i, and shift+a: mueve el cursor y te pone en insert mode al principio de la linea y el otro lo mismo pero al final de la linea.<br />
/,  n, and shift+n. busca hacia delante del cursor, con n recorr√©s las ocurrencias, con shift+n las recorr√©s hacia atr√°s.<br />
?: busca hacia atr√°s del cursor.<br />
* and #, busca las palabras en todo el texto de la palabra en donde tu cursor est√° situado (busca hacia adelante).<br />
#: hace lo mismo pero hacia atr√°s</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"f\*" busca y salta al primer caracter encontrado en la l√≠nea en donde est√° el cursor. Ejemplo: fa 
"t\*" busca y salta atr√°s del primer caracter encontrado en la l√≠nea donde est√° el cursor. Ejemplo: ta 
"F\*" y "T\*" saltan hacia atr√°s en los resultados encontrados 
</code></pre></div></div>

<p>Pero esto se puede hacer m√°s f√°cil usando:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>";" salta hacia adelante y "," salta hacia atr√°s son iguales que F\* y T\*  
"x" eliminar un caracter, "s" eliminar un caracter y ponerte en inser mode (muy √∫til)  
"cw" (or "ce") borrar una palabra y entrar a insert mode   
combos: "dt)", "vf)", "vt)",  "yt)", "ct)", etc.   
Shift+d ("D") borra el resto de l√≠nea desde donde est√° el cursor hacia adelante y te deja en normal mode.  
Shift+c("C") hace lo mismo que Shift+d pero te deja en insert mode.   
Shift+s ("S") borra una l√≠nea **entera** y te deja en insert mode  
"gg" salta al comienzo del archivo y "G" salta al final.  
":100" o "100G" saltan a la l√≠nea 100  
"12j" salta hacia abajo 12 l√≠neas, "12k" salta hacia arriba (se puede combinar tambi√©n con "w" o con "b" pero no es tan usado).  
</code></pre></div></div>

<p><strong>Us√° relative numbers agregando ‚Äúset relativenumber‚Äù in .vimrc</strong>
Te sirve para saber cuantas lineas hay hacia arriba y abajo desde la l√≠nea en donde est√° tu cursor.
Esto es √∫til para saber cuantas l√≠neas ten√©s que saltar usando por (numero)j o (numero)k.</p>

<p>‚Äù{‚Äú y ‚Äú}‚Äù sirven para moverse hacia atr√°s o adelante entre parrafos es decir salta entre l√≠neas vac√≠as.
‚ÄúCtrl + u‚Äù y ‚ÄúCtrl + d‚Äù es equivalente a Page Up y Page Down, sirven para mover mitad de p√°gina hacia arriba o hacia abajo en el archivo.
‚Äú%‚Äù si te ubic√°s al final de una llave, corchete, o par√©ntesis y apret√°s %, te lleva hacia donde se abri√≥ o se cerr√≥, no funciona con comillas.</p>

<p>‚Äù*i{‚Äú sirve para ejecutar un comando * dentro de unas llaves. Por ejemplo: ‚Äúdi{‚Äú, ‚Äúd2i{‚Äú, ‚Äúci{‚Äú<br />
Si usamos d2i, afectaremos las llaves externas.</p>

<p>‚Äù*ip‚Äù sirve para ejecutar un comando * sobre un p√°rrafo. Por ejemplo: ‚Äúcip‚Äù, ‚Äúvip‚Äù<br />
‚Äú*a[‚Äù sirve para ejecutar un comando * dentro de unos corchetes incluyendo el corchete. <br />
Por ejemplo: ‚Äúda{‚Äú</p>

<p>‚Äúdiw‚Äù para eliminar una palabra si tu cursor est√° en el medio de una.</p>

<p>‚Äú:e &lt;carpeta/nombre_del_archivo&gt;‚Äù para abrir un archivo y se usa tab para autocompletar.
Si el archivo est√° en el directorio actual simplemente pon√©s el nombre del archivo :e home.html
Ejemplo de uso: :e css/styl y luego uso &lt;tab&gt; para autocompletar el nombre del archivo.</p>

<p><span style="color: red; font-weight: bold;">‚ÄúCtrl + p‚Äù to open plug-in finder (fzf recommended)</span></p>

<p>Si abriste archivos con :e se usa Ctrl+6 o Ctrl+^ para moverte entre los dos √∫ltimos archivos abiertos.</p>

<p>Tip: Have a main file that serves as hub, &lt;Ctrl + p&gt; to file you want to go to (spoke), and then &lt;Ctrl + ^&gt; back to hub (avoid hopping around in a triangle between more than 2 files)</p>

<p>‚ÄúCtrl + o‚Äù and ‚ÄúCtrl + i‚Äù to jump backwards and forwards through history (can be inefficient if you have to jump back a lot)    <br />
‚Äúmh‚Äù para establecer una marca local a la que pod√©s saltar usando ‚Äòh (pod√©s usar cualquier letra) pero‚Ä¶</p>
<blockquote>
  <p>Observaci√≥n 1: Ten√© s√≥lo de 3-4 marcas con ‚Äúh‚Äù de las cosas m√°s importantes y ‚Äúl‚Äù de las menos importantes</p>
</blockquote>

<blockquote>
  <p>Observaci√≥n 2: Usar el comando para buscar descripto m√°s arriba puede ser m√°s eficiente que usar marcas locales.</p>
</blockquote>

<p>‚ÄúmH‚Äù para establecer una marca global a la que pod√©s saltar usando ‚ÄòH (pod√©s usar cualquier letra)</p>

<p>Algunos usan divisiones y no pesta√±as.</p>

<p><code class="language-plaintext highlighter-rouge">&lt;Ctrl + w&gt; + "o"</code> para cerrar todos los b√∫feres a excepci√≥n del actual buffer <br />
<code class="language-plaintext highlighter-rouge">&lt;Ctrl + w&gt; + "v"</code> para separar verticalmente, &lt;Ctrl + w&gt; + ‚Äús‚Äù (or ‚Äún‚Äù) para separar horizontalmente.<br />
<code class="language-plaintext highlighter-rouge">":resize 10"</code> to set split to 10 rows tall, ‚Äú:vertical resize 20‚Äù to set split to 20 columns wide   <br />
<code class="language-plaintext highlighter-rouge">&lt;Ctrl + w&gt; + "="</code> para dividir por igual los splits, si es que antes lo cambiaste con resize.</p>

<p><code class="language-plaintext highlighter-rouge">&lt;Ctrl + w&gt; + "r"</code> sirve para rotar los bufers, &lt;Ctrl + w&gt; + ‚ÄúH‚Äù para cambiar la divisi√≥n de horizontal a vertical</p>

<p><code class="language-plaintext highlighter-rouge">":h \*"</code> sirve para abrir el manual de ayuda. Como por ejemplo :h f (con el espacio)
Se recomienda usar gruvbox como colour scheme por defecto.</p>

<p>Se puede seleccionar l√≠neas enteras (Shift+v luego pulsar k o j repetidamente para seleccionar las l√≠neas) y luego escribir <code class="language-plaintext highlighter-rouge">:norm I&lt;y el texto a agregar&gt;</code> o <code class="language-plaintext highlighter-rouge">:norm A&lt;y el texto a agregar&gt;</code> para agregar texto atr√°s o adelante respectivametne.</p>

<h3 id="tabs">Tabs.</h3>
<p>Si ten√©s el plugin FZF instalado pod√©s navegar entre las tabs usando el comando W (:W) y pod√©s moverte escribiendo el nombre o el n√∫mero de la tab.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:tabnew {file} o :tabedit {file} para crear una nueva pesta√±a, le pod√©s pasar el nombre de archivo a modificar o a crear.
Por ejemplo: :tabnew nuevo\_archivo
:tabfind {file} - abre un nuevo archivo es lo mismo que :tabnew y :tabedit.
:tabclose - cierra la tab que est√°s usando
:tabclose {i} - cierra la tab n√∫mero i
:tabonly (cerra todas las dem√°s tabs menos la que est√°s usando)
gt para ir a la siguiente.
gT para ir a la anterior.
:tabn para ir a la siguiente
:tabp para ir a la anterior.
:tabfirst para ir a la primera
:tablast para ir a la √∫ltima
</code></pre></div></div>

<p><span style="color: yellow;">Si us√°s ZSH pod√©s usar el modo vimode para usar las keybindings(atajos de teclado) de vim</span>, si mal no recuerdo Bash y Fish tambi√©n lo tienen. Para conseguir esto en zshen zsh  basta con agregar <code class="language-plaintext highlighter-rouge">bindkey -v</code> en el .zshrc</p>

:ET